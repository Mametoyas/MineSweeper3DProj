extends Node3D

# --- üîß CONFIG --- #
@export var enemy_scenes: Array[PackedScene] = []
@export var pool_size: int = 40
@export var spawn_interval: float = 3.0
@export var min_interval: float = 0.5
@export var spawn_accel: float = 0.95
@export var max_active_enemies: int = 40

@onready var path = $Path3D
@onready var path_follow = $Path3D/PathFollow3D
@onready var spawn_timer = $EnemySpawnTimer
@onready var player = get_tree().get_first_node_in_group("Player")

var enemy_pool: Array = []
var active_enemies: int = 0
var wave_count: int = 1


# ---------------------------
# üß† ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Pool ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°
# ---------------------------
func _ready():
	if enemy_scenes.is_empty():
		push_warning("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà enemy_scenes ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 scene ‡πÉ‡∏ô Inspector!")
		return

	print("üõ† Initializing Enemy Pool...")

	for i in range(pool_size):
		var enemy_scene = enemy_scenes.pick_random()  # ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏®‡∏±‡∏ï‡∏£‡∏π
		var enemy = enemy_scene.instantiate()
		enemy.visible = false
		enemy.set_physics_process(false)
		enemy.set_process(false)
		enemy.add_to_group("Enemy")
		enemy.spawner = self
		add_child(enemy)
		enemy_pool.append(enemy)

	spawn_timer.wait_time = spawn_interval
	spawn_timer.timeout.connect(_on_spawn_timer_timeout)
	spawn_timer.start()

	add_to_group("Spawner")
	print("‚úÖ Enemy pool created:", enemy_pool.size())


# ---------------------------
# üîÅ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ Timer ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
# ---------------------------
func _on_spawn_timer_timeout():
	var enemies_to_spawn = randi_range(1, 3)  # ‚úÖ ‡∏™‡∏∏‡πà‡∏° 1‚Äì3 ‡∏ï‡∏±‡∏ß
	for i in range(enemies_to_spawn):
		_spawn_enemy_from_pool()

	if active_enemies < max_active_enemies:
		spawn_interval = max(spawn_interval * spawn_accel, min_interval)
	else:
		spawn_interval = clamp(spawn_interval * 1.2, min_interval, 5.0)

	spawn_timer.wait_time = spawn_interval
	spawn_timer.start()


# ---------------------------
# üíÄ ‡∏î‡∏∂‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Pool
# ---------------------------
func _spawn_enemy_from_pool():
	if not player:
		return
	if active_enemies >= max_active_enemies:
		return

	# ‚úÖ ‡∏´‡∏≤ enemy ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
	for enemy in enemy_pool:
		if not enemy.visible and is_instance_valid(enemy):
			path_follow.progress_ratio = randf()
			var pos = path_follow.global_position
			enemy.global_position = pos

			if enemy.has_method("reset_state"):
				enemy.reset_state()

			enemy.visible = true
			enemy.set_physics_process(true)
			enemy.set_process(true)
			active_enemies += 1
			return

	# ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô pool ‚Üí ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
	if enemy_pool.size() < 100:
		var new_enemy_scene = enemy_scenes.pick_random()
		var new_enemy = new_enemy_scene.instantiate()
		new_enemy.visible = true
		new_enemy.spawner = self
		add_child(new_enemy)
		enemy_pool.append(new_enemy)
		active_enemies += 1
		print("‚öôÔ∏è Pool expanded to:", enemy_pool.size())


# ---------------------------
# üîÑ ‡∏Ñ‡∏∑‡∏ô‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏π‡∏•
# ---------------------------
func return_enemy_to_pool(enemy):
	if not is_instance_valid(enemy):
		return
	if enemy in enemy_pool:
		enemy.visible = false
		enemy.set_physics_process(false)
		enemy.set_process(false)
		enemy.global_position = Vector3.ZERO
		active_enemies = max(active_enemies - 1, 0)
